/**
 * InstructionLookup.java
 *
 * Stores and retrieves assembler instructions.
 */

import java.util.*;

/**
 *
 */
public class InstructionLookup {
	
	public static final String[] opcodeNames = {
		"ADC","AND","ASL","BCC","BCS","BEQ","BIT","BMI",
		"BNE","BPL","BRK","BVC","BVS","CLC","CLD","CLI",
		"CLV","CMP","CPX","CPY","DEC","DEX","DEY","EOR",
		"INC","INX","INY","JMP","JSR","LDA","LDX","LDY",
		"LSR","NOP","ORA","PHA","PHP","PLA","PLP","ROL",
		"ROR","RTI","RTS","SBC","SEC","SED","SEI","STA",
		"STX","STY","TAX","TAY","TSX","TXA","TXS","TYA"
	};
	
	public static final String[] branchOpcodeNames = {
		"ADC","AND","ASL","BCC","BCS","BEQ","BIT","BMI",
		"BNE","BPL","BRK","BVC","BVS","CLC","CLD","CLI",
		"CLV","CMP","CPX","CPY","DEC","DEX","DEY","EOR",
		"INC","INX","INY","JMP","JSR","LDA","LDX","LDY",
		"LSR","NOP","ORA","PHA","PHP","PLA","PLP","ROL",
		"ROR","RTI","RTS","SBC","SEC","SED","SEI","STA",
		"STX","STY","TAX","TAY","TSX","TXA","TXS","TYA"
	};	
	
	public static final String[] psuedoOpCodeNames = {
		"ORG","END"
	};	
	
	// list of all opcodes sorted by byte-value 0x00 -> 0xFF
    public static final String[] opcodeSymbols = {
        "BRK", "ORA",  null,  null,  null, "ORA", "ASL",  null,
        "PHP", "ORA", "ASL",  null,  null, "ORA", "ASL",  null,
        "BPL", "ORA",  null,  null,  null, "ORA", "ASL",  null,
        "CLC", "ORA",  null,  null,  null, "ORA", "ASL",  null,
        "JSR", "AND",  null,  null, "BIT", "AND", "ROL",  null,
        "PLP", "AND", "ROL",  null, "BIT", "AND", "ROL",  null,
        "BMI", "AND",  null,  null,  null, "AND", "ROL",  null,
        "SEC", "AND",  null,  null,  null, "AND", "ROL",  null,
        "RTI", "EOR",  null,  null,  null, "EOR", "LSR",  null,
        "PHA", "EOR", "LSR",  null, "JMP", "EOR", "LSR",  null,
        "BVC", "EOR",  null,  null,  null, "EOR", "LSR",  null,
        "CLI", "EOR",  null,  null,  null, "EOR", "LSR",  null,
        "RTS", "ADC",  null,  null,  null, "ADC", "ROR",  null,
        "PLA", "ADC", "ROR",  null, "JMP", "ADC", "ROR",  null,
        "BVS", "ADC",  null,  null,  null, "ADC", "ROR",  null,
        "SEI", "ADC",  null,  null,  null, "ADC", "ROR",  null,
        "BCS", "STA",  null,  null, "STY", "STA", "STX",  null,
        "DEY",  null, "TXA",  null, "STY", "STA", "STX",  null,
        "BCC", "STA",  null,  null, "STY", "STA", "STX",  null,
        "TYA", "STA", "TXS",  null,  null, "STA",  null,  null,
        "LDY", "LDA", "LDX",  null, "LDY", "LDA", "LDX",  null,
        "TAY", "LDA", "TAX",  null, "LDY", "LDA", "LDX",  null,
        "BCS", "LDA",  null,  null, "LDY", "LDA", "LDX",  null,
        "CLV", "LDA", "TSX",  null, "LDY", "LDA", "LDX",  null,
        "CPY", "CMP",  null,  null, "CPY", "CMP", "DEC",  null,
        "INY", "CMP", "DEX",  null, "CPY", "CMP", "DEC",  null,
        "BNE", "CMP",  null,  null,  null, "CMP", "DEC",  null,
        "CLD", "CMP",  null,  null,  null, "CMP", "DEC",  null,
        "CPX", "SBC",  null,  null, "CPX", "SBC", "INC",  null,
        "INX", "SBC", "NOP",  null, "CPX", "SBC", "INC",  null,
        "BEQ", "SBC",  null,  null,  null, "SBC", "INC",  null,
        "SED", "SBC",  null,  null,  null, "SBC", "INC",  null
    };
    
	// list of all opcodes sorted by byte-value 0x00 -> 0xFF
    public static final Integer[][] opcodeLookup = {    
    	{0x69,0x65,0x75,0xFF,0x6D,0x7D,0x79,0x61,0x71,0xFF,0xFF,0xFF,0xFF},
    	{0x29,0x25,0x35,0xFF,0x2D,0x3D,0x39,0x21,0x31,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0x06,0x16,0xFF,0x0E,0x1E,0xFF,0xFF,0xFF,0x0A,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x90,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xB0,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF},
    	{0xFF,0x24,0xFF,0xFF,0x2C,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x30,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xD0,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x10,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x50,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x70,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x18,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xD8,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x58,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xB8,0xFF,0xFF},
    	{0xC9,0xC5,0xD5,0xFF,0xCD,0xDD,0xD9,0xC1,0xD1,0xFF,0xFF,0xFF,0xFF},
    	{0xE0,0xE4,0xFF,0xFF,0xEC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xC0,0xC4,0xFF,0xFF,0xCC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xC6,0xD6,0xFF,0xCE,0xDE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xCA,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x88,0xFF,0xFF},
    	{0x49,0x45,0x55,0xFF,0x4D,0x5D,0x59,0x41,0x51,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xE6,0xF6,0xFF,0xEE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE8,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC8,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0x4C,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x6C},
    	{0xFF,0xFF,0xFF,0xFF,0x20,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xA9,0xA5,0xB5,0xFF,0xAD,0xBD,0xB9,0xA1,0xB1,0xFF,0xFF,0xFF,0xFF},
    	{0xA2,0xA6,0xFF,0xB6,0xAE,0xFF,0xBE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xA0,0xA4,0xB4,0xFF,0xAC,0xBC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0x46,0x56,0xFF,0x4E,0x5E,0xFF,0xFF,0xFF,0x4A,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEA,0xFF,0xFF},
    	{0x09,0x05,0x15,0xFF,0x0D,0x1D,0x19,0x01,0x11,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x48,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x08,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x68,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x28,0xFF,0xFF},
    	{0xFF,0x26,0x36,0xFF,0x2E,0x3E,0xFF,0xFF,0xFF,0x2A,0xFF,0xFF,0xFF},
    	{0xFF,0x66,0x76,0xFF,0x6E,0x7E,0xFF,0xFF,0xFF,0x6A,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x60,0xFF,0xFF},
    	{0xE9,0xE5,0xF5,0xFF,0xED,0xFD,0xF9,0xE1,0xF1,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x38,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x78,0xFF,0xFF},
    	{0xFF,0x85,0x95,0xFF,0x8D,0x9D,0x99,0x81,0x91,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0x86,0xFF,0x96,0x8E,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0x84,0x94,0xFF,0x8C,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xAA,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xA8,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBA,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x8A,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9A,0xFF,0xFF},
    	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x98,0xFF,0xFF}
    };
	
	public InstructionLookup(){
		
	}

	public Integer produceOpCode(String symbol){
		
		return null;
	}	
	
	public static boolean isOpcodeName(String op){
		for(int i=0;i<opcodeNames.length;i++)
			if(op.equals(opcodeNames[i]))
					return true;
		return false;		
	}
	
	public static boolean isPsuedoInstruction(String op){
		for(int i=0;i<psuedoOpCodeNames.length;i++)
			if(op.equals(psuedoOpCodeNames[i]))
					return true;
		return false;		
	}
	
	public static Integer getOpCode(String operation,Integer opmode) throws InvalidInstructionException{
		Integer value = null;
		Instruction.operation name = null;
		try {
			name = Instruction.operation.valueOf(operation);
			value = name.ordinal();			
		}
		catch (IllegalArgumentException ex){
			ex.printStackTrace();
			System.out.println("Opcode not found");
			throw new InvalidInstructionException("Opcode Not Found");
		}
		if(InstructionLookup.opcodeLookup[value][opmode]==0xFF)
			throw new InvalidInstructionException("Opcode lookup failed, invalid instruction");
		else
			return InstructionLookup.opcodeLookup[value][opmode];	
	}
	
	public static String getaddressMode(Integer mode){
		switch(mode){
		case -1:
			return "INVALID";
		case 1:
			return "IMMEDIATE";
		case 2:
			return "ZERO_PAGE";
		case 3:
			return "ZERO_PAGE_X";
		case 4:
			return "ZERO_PAGE_Y";
		case 5:
			return "ABSOLUTE";
		case 6:
			return "ABSOLUTE_X";
		case 7:
			return "ABSOLUTE_Y";
		case 8:
			return "INDIRECT_X";
		case 9:
			return "INDIRECT_Y";
		case 10:
			return "ACCUMULATOR";
		case 11:
			return "IMPLIED";
		case 12:
			return "RELATIVE";
		case 13:
			return "INDIRECT";
		}		
		return "UNKNOWN";
	}
	
}
